
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000001ae  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d8  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ea  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014e  00000000  00000000  0000195b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001aa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  7a:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keyPad_vIntial>:
#include "KeyPadDriver.h"


void keyPad_vIntial(void){
	KEY_PAD_DDR = 0x0f;
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	84 bb       	out	0x14, r24	; 20
	KEY_PAD_PORT = 0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	85 bb       	out	0x15, r24	; 21
  8a:	08 95       	ret

0000008c <keyPad_vScan>:
}
uint8 keyPad_vScan(void){
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	60 97       	sbiw	r28, 0x10	; 16
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
	int rows,col;
	const char arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	de 01       	movw	r26, r28
  a8:	11 96       	adiw	r26, 0x01	; 1
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	8a 95       	dec	r24
  b0:	e1 f7       	brne	.-8      	; 0xaa <keyPad_vScan+0x1e>
	for(rows = 0;rows<=3 ;rows ++)
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f0 e0       	ldi	r31, 0x00	; 0
	{
		// put it as macros for putting port pins  to 1 ? as it deals directly with micro controller
		KEY_PAD_PORT = 0xff;
  b6:	6f ef       	ldi	r22, 0xFF	; 255
		CLR_BIT(KEY_PAD_PORT,rows);
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	50 e0       	ldi	r21, 0x00	; 0
	int rows,col;
	const char arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	for(rows = 0;rows<=3 ;rows ++)
	{
		// put it as macros for putting port pins  to 1 ? as it deals directly with micro controller
		KEY_PAD_PORT = 0xff;
  bc:	65 bb       	out	0x15, r22	; 21
		CLR_BIT(KEY_PAD_PORT,rows);
  be:	95 b3       	in	r25, 0x15	; 21
  c0:	9a 01       	movw	r18, r20
  c2:	0e 2e       	mov	r0, r30
  c4:	02 c0       	rjmp	.+4      	; 0xca <keyPad_vScan+0x3e>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <keyPad_vScan+0x3a>
  ce:	82 2f       	mov	r24, r18
  d0:	80 95       	com	r24
  d2:	89 23       	and	r24, r25
  d4:	85 bb       	out	0x15, r24	; 21
		for(col = 4;col<=7;col++){
			
			if(0 == READ_BIT(KEY_PAD_PIN,col)){
  d6:	9c 9b       	sbis	0x13, 4	; 19
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <keyPad_vScan+0x68>
  da:	25 e0       	ldi	r18, 0x05	; 5
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	83 b3       	in	r24, 0x13	; 19
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 2e       	mov	r0, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <keyPad_vScan+0x5e>
  e6:	95 95       	asr	r25
  e8:	87 95       	ror	r24
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <keyPad_vScan+0x5a>
  ee:	80 fd       	sbrc	r24, 0
  f0:	13 c0       	rjmp	.+38     	; 0x118 <keyPad_vScan+0x8c>
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <keyPad_vScan+0x6c>
	for(rows = 0;rows<=3 ;rows ++)
	{
		// put it as macros for putting port pins  to 1 ? as it deals directly with micro controller
		KEY_PAD_PORT = 0xff;
		CLR_BIT(KEY_PAD_PORT,rows);
		for(col = 4;col<=7;col++){
  f4:	24 e0       	ldi	r18, 0x04	; 4
  f6:	30 e0       	ldi	r19, 0x00	; 0
			
			if(0 == READ_BIT(KEY_PAD_PIN,col)){
				return arr[rows][col-4];
  f8:	ee 0f       	add	r30, r30
  fa:	ff 1f       	adc	r31, r31
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	8c 0f       	add	r24, r28
 106:	9d 1f       	adc	r25, r29
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	2e 0f       	add	r18, r30
 10e:	3f 1f       	adc	r19, r31
 110:	f9 01       	movw	r30, r18
 112:	34 97       	sbiw	r30, 0x04	; 4
 114:	80 81       	ld	r24, Z
 116:	0a c0       	rjmp	.+20     	; 0x12c <keyPad_vScan+0xa0>
	for(rows = 0;rows<=3 ;rows ++)
	{
		// put it as macros for putting port pins  to 1 ? as it deals directly with micro controller
		KEY_PAD_PORT = 0xff;
		CLR_BIT(KEY_PAD_PORT,rows);
		for(col = 4;col<=7;col++){
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	28 30       	cpi	r18, 0x08	; 8
 11e:	31 05       	cpc	r19, r1
 120:	f1 f6       	brne	.-68     	; 0xde <keyPad_vScan+0x52>
	KEY_PAD_PORT = 0xff;
}
uint8 keyPad_vScan(void){
	int rows,col;
	const char arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	for(rows = 0;rows<=3 ;rows ++)
 122:	31 96       	adiw	r30, 0x01	; 1
 124:	e4 30       	cpi	r30, 0x04	; 4
 126:	f1 05       	cpc	r31, r1
 128:	49 f6       	brne	.-110    	; 0xbc <keyPad_vScan+0x30>
			}
		}
		
	}
	
	return NO_PRESS;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	60 96       	adiw	r28, 0x10	; 16
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <main>:
  MCUCR &= ~(1<<ISC00);
  enable peripheral
  GICR |= (1<<INT0);
    PORTD = 0x01; */
   
    DDRD = 0xf0;
 13e:	80 ef       	ldi	r24, 0xF0	; 240
 140:	81 bb       	out	0x11, r24	; 17
    
	keyPad_vIntial();
 142:	0e 94 41 00 	call	0x82	; 0x82 <keyPad_vIntial>
	SevenSeg_vInitial();
 146:	0e 94 ad 00 	call	0x15a	; 0x15a <SevenSeg_vInitial>
	
    while (1) 
    {
	 #if defined TEST_KEYPAD_SEGMENT
		char x = keyPad_vScan();
 14a:	0e 94 46 00 	call	0x8c	; 0x8c <keyPad_vScan>
		if (x != NO_PRESS)
 14e:	8f 3f       	cpi	r24, 0xFF	; 255
 150:	e1 f3       	breq	.-8      	; 0x14a <main+0xc>
		{
			x = x - '0';
			SevenSeg_Display(x);
 152:	80 53       	subi	r24, 0x30	; 48
 154:	0e 94 b0 00 	call	0x160	; 0x160 <SevenSeg_Display>
 158:	f8 cf       	rjmp	.-16     	; 0x14a <main+0xc>

0000015a <SevenSeg_vInitial>:
#include "SevenSegment.h"

void SevenSeg_vInitial(void){
	SEVEN_SEGDDR = 0xff;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	81 bb       	out	0x11, r24	; 17
 15e:	08 95       	ret

00000160 <SevenSeg_Display>:
}

void SevenSeg_Display(uint8 parNo){
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	2a 97       	sbiw	r28, 0x0a	; 10
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
	
	char arr[10]  = {0b0111111,0b0000110,0b1011011,0b1001111,0b1100110,0b1101101,0b1111101,0b1000111,0b1111111,0b1101111};
 174:	9a e0       	ldi	r25, 0x0A	; 10
 176:	e0 e7       	ldi	r30, 0x70	; 112
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	de 01       	movw	r26, r28
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	01 90       	ld	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	9a 95       	dec	r25
 184:	e1 f7       	brne	.-8      	; 0x17e <SevenSeg_Display+0x1e>
	SEVEN_SEGPORT = 0b0000000;
 186:	12 ba       	out	0x12, r1	; 18
	SEVEN_SEGPORT = arr[parNo];
 188:	e1 e0       	ldi	r30, 0x01	; 1
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	e8 0f       	add	r30, r24
 192:	f1 1d       	adc	r31, r1
 194:	80 81       	ld	r24, Z
 196:	82 bb       	out	0x12, r24	; 18
}
 198:	2a 96       	adiw	r28, 0x0a	; 10
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
