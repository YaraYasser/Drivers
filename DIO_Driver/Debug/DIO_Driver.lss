
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000342  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1b  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070b  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f3  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005aa  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000264f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  64:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_vSetPinDirection>:
 */ 

#include <avr/io.h>
#include "DIO.h"
void DIO_vSetPinDirection(uint8 PortName,uint8 Direction,uint8 PinNum){
	switch (PortName)
  6c:	82 34       	cpi	r24, 0x42	; 66
  6e:	19 f1       	breq	.+70     	; 0xb6 <DIO_vSetPinDirection+0x4a>
  70:	18 f4       	brcc	.+6      	; 0x78 <DIO_vSetPinDirection+0xc>
  72:	81 34       	cpi	r24, 0x41	; 65
  74:	39 f0       	breq	.+14     	; 0x84 <DIO_vSetPinDirection+0x18>
  76:	08 95       	ret
  78:	83 34       	cpi	r24, 0x43	; 67
  7a:	b1 f1       	breq	.+108    	; 0xe8 <DIO_vSetPinDirection+0x7c>
  7c:	84 34       	cpi	r24, 0x44	; 68
  7e:	09 f4       	brne	.+2      	; 0x82 <DIO_vSetPinDirection+0x16>
  80:	4c c0       	rjmp	.+152    	; 0x11a <DIO_vSetPinDirection+0xae>
  82:	08 95       	ret
	{
		case 'A':
			if(1 == Direction){
  84:	61 30       	cpi	r22, 0x01	; 1
  86:	59 f4       	brne	.+22     	; 0x9e <DIO_vSetPinDirection+0x32>
				DDRA |= (1<<PinNum);
  88:	2a b3       	in	r18, 0x1a	; 26
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <DIO_vSetPinDirection+0x28>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	4a 95       	dec	r20
  96:	e2 f7       	brpl	.-8      	; 0x90 <DIO_vSetPinDirection+0x24>
  98:	82 2b       	or	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	08 95       	ret
			}
			else{
				DDRA &= ~(1<<PinNum);
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_vSetPinDirection+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	4a 95       	dec	r20
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_vSetPinDirection+0x3a>
  ae:	80 95       	com	r24
  b0:	82 23       	and	r24, r18
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
			}
			break;
		case 'B':
		if(1 == Direction){
  b6:	61 30       	cpi	r22, 0x01	; 1
  b8:	59 f4       	brne	.+22     	; 0xd0 <DIO_vSetPinDirection+0x64>
			DDRB |= (1<<PinNum);
  ba:	27 b3       	in	r18, 0x17	; 23
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_vSetPinDirection+0x5a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	4a 95       	dec	r20
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_vSetPinDirection+0x56>
  ca:	82 2b       	or	r24, r18
  cc:	87 bb       	out	0x17, r24	; 23
  ce:	08 95       	ret
		}
		else{
			DDRB &= ~(1<<PinNum);
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vSetPinDirection+0x70>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	4a 95       	dec	r20
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vSetPinDirection+0x6c>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	08 95       	ret
		}
		break;
		
		case 'C':
		if(1 == Direction){
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	59 f4       	brne	.+22     	; 0x102 <DIO_vSetPinDirection+0x96>
			DDRC |= (1<<PinNum);
  ec:	24 b3       	in	r18, 0x14	; 20
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vSetPinDirection+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	4a 95       	dec	r20
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vSetPinDirection+0x88>
  fc:	82 2b       	or	r24, r18
  fe:	84 bb       	out	0x14, r24	; 20
 100:	08 95       	ret
		}
		else{
			DDRC &= ~(1<<PinNum);
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_vSetPinDirection+0xa2>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	4a 95       	dec	r20
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_vSetPinDirection+0x9e>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	84 bb       	out	0x14, r24	; 20
 118:	08 95       	ret
		}
		break;
		
		case 'D':
		if(1 == Direction){
 11a:	61 30       	cpi	r22, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <DIO_vSetPinDirection+0xc8>
			DDRD |= (1<<PinNum);
 11e:	21 b3       	in	r18, 0x11	; 17
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_vSetPinDirection+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	4a 95       	dec	r20
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_vSetPinDirection+0xba>
 12e:	82 2b       	or	r24, r18
 130:	81 bb       	out	0x11, r24	; 17
 132:	08 95       	ret
		}
		else{
			DDRD &= ~(1<<PinNum);
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_vSetPinDirection+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	4a 95       	dec	r20
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_vSetPinDirection+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <DIO_vWrite>:
	}
}

void DIO_vWrite(uint8 PortName,uint8 voltType,uint8 PinNum){
	
	switch (PortName)
 14c:	82 34       	cpi	r24, 0x42	; 66
 14e:	19 f1       	breq	.+70     	; 0x196 <DIO_vWrite+0x4a>
 150:	18 f4       	brcc	.+6      	; 0x158 <DIO_vWrite+0xc>
 152:	81 34       	cpi	r24, 0x41	; 65
 154:	39 f0       	breq	.+14     	; 0x164 <DIO_vWrite+0x18>
 156:	08 95       	ret
 158:	83 34       	cpi	r24, 0x43	; 67
 15a:	b1 f1       	breq	.+108    	; 0x1c8 <DIO_vWrite+0x7c>
 15c:	84 34       	cpi	r24, 0x44	; 68
 15e:	09 f4       	brne	.+2      	; 0x162 <DIO_vWrite+0x16>
 160:	4c c0       	rjmp	.+152    	; 0x1fa <DIO_vWrite+0xae>
 162:	08 95       	ret
	{
		case 'A':
		if(1 == voltType){
 164:	61 30       	cpi	r22, 0x01	; 1
 166:	59 f4       	brne	.+22     	; 0x17e <DIO_vWrite+0x32>
			PORTA |= (1<<PinNum);
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_vWrite+0x28>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	4a 95       	dec	r20
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_vWrite+0x24>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	08 95       	ret
		}
		
		else{
			PORTA &= ~(1<<PinNum);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vWrite+0x3e>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	4a 95       	dec	r20
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vWrite+0x3a>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
 194:	08 95       	ret
		}
			break;
		case 'B':
			if(1 == voltType){
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	59 f4       	brne	.+22     	; 0x1b0 <DIO_vWrite+0x64>
			PORTB |= (1<<PinNum);
 19a:	28 b3       	in	r18, 0x18	; 24
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vWrite+0x5a>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	4a 95       	dec	r20
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vWrite+0x56>
 1aa:	82 2b       	or	r24, r18
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	08 95       	ret
			}
			else{
				PORTB &= ~(1<<PinNum);
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_vWrite+0x70>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	4a 95       	dec	r20
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_vWrite+0x6c>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
			}
			break;
		case 'C':
			if(1 == voltType){
 1c8:	61 30       	cpi	r22, 0x01	; 1
 1ca:	59 f4       	brne	.+22     	; 0x1e2 <DIO_vWrite+0x96>
				PORTC |= (1<<PinNum);
 1cc:	25 b3       	in	r18, 0x15	; 21
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_vWrite+0x8c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	4a 95       	dec	r20
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_vWrite+0x88>
 1dc:	82 2b       	or	r24, r18
 1de:	85 bb       	out	0x15, r24	; 21
 1e0:	08 95       	ret
			}
			else{
				PORTC &= ~(1<<PinNum);
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_vWrite+0xa2>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	4a 95       	dec	r20
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_vWrite+0x9e>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
			}
			break;
		case 'D':
			if(1 == voltType){
 1fa:	61 30       	cpi	r22, 0x01	; 1
 1fc:	59 f4       	brne	.+22     	; 0x214 <DIO_vWrite+0xc8>
				PORTD |= (1<<PinNum);
 1fe:	22 b3       	in	r18, 0x12	; 18
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_vWrite+0xbe>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	4a 95       	dec	r20
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_vWrite+0xba>
 20e:	82 2b       	or	r24, r18
 210:	82 bb       	out	0x12, r24	; 18
 212:	08 95       	ret
			}
			else{
				PORTD &= ~(1<<PinNum);
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_vWrite+0xd4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	4a 95       	dec	r20
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_vWrite+0xd0>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret

0000022c <LED_vInitial>:

#include <avr/io.h>
#include "DIO.h"
#include "LED.h"

void LED_vInitial(uint8 PortName,uint8 PinNum){
 22c:	46 2f       	mov	r20, r22
	DIO_vSetPinDirection(PortName,1,PinNum);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vSetPinDirection>
 234:	08 95       	ret

00000236 <LED_vTurnOn>:
}

void LED_vTurnOn(uint8 PortName,uint8 PinNum){
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	c8 2f       	mov	r28, r24
 23c:	d6 2f       	mov	r29, r22
	
	LED_vInitial(PortName,PinNum);
 23e:	0e 94 16 01 	call	0x22c	; 0x22c <LED_vInitial>
	DIO_vWrite(PortName,1,PinNum);
 242:	4d 2f       	mov	r20, r29
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	8c 2f       	mov	r24, r28
 248:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_vWrite>
	
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <LED_vTurnOff>:
void LED_vTurnOff(uint8 PortName,uint8 PinNum){
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	c8 2f       	mov	r28, r24
 258:	d6 2f       	mov	r29, r22
	LED_vInitial(PortName,PinNum);
 25a:	0e 94 16 01 	call	0x22c	; 0x22c <LED_vInitial>
	DIO_vWrite(PortName,0,PinNum);
 25e:	4d 2f       	mov	r20, r29
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	8c 2f       	mov	r24, r28
 264:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_vWrite>
	
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <main>:


int main(void)
{
	/* enable CPU for interupt */
	sei();
 26e:	78 94       	sei
	/*rising edge*/
	
  MCUCR &= ~(1<<ISC01);
 270:	85 b7       	in	r24, 0x35	; 53
 272:	8d 7f       	andi	r24, 0xFD	; 253
 274:	85 bf       	out	0x35, r24	; 53
  MCUCR &= ~(1<<ISC00);
 276:	85 b7       	in	r24, 0x35	; 53
 278:	8e 7f       	andi	r24, 0xFE	; 254
 27a:	85 bf       	out	0x35, r24	; 53
  /*enable peripheral*/
  GICR |= (1<<INT0);
 27c:	8b b7       	in	r24, 0x3b	; 59
 27e:	80 64       	ori	r24, 0x40	; 64
 280:	8b bf       	out	0x3b, r24	; 59
    while (1) 
    {
		LED_vTurnOn(LED0_PORT,LED0_PIN);
 282:	65 e0       	ldi	r22, 0x05	; 5
 284:	84 e4       	ldi	r24, 0x44	; 68
 286:	0e 94 1b 01 	call	0x236	; 0x236 <LED_vTurnOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	89 e6       	ldi	r24, 0x69	; 105
 28e:	98 e1       	ldi	r25, 0x18	; 24
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x22>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x2c>
 29a:	00 00       	nop
	 _delay_ms(1000);
		LED_vTurnOff(LED0_PORT,LED0_PIN);
 29c:	65 e0       	ldi	r22, 0x05	; 5
 29e:	84 e4       	ldi	r24, 0x44	; 68
 2a0:	0e 94 29 01 	call	0x252	; 0x252 <LED_vTurnOff>
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	89 e6       	ldi	r24, 0x69	; 105
 2a8:	98 e1       	ldi	r25, 0x18	; 24
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x3c>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x46>
 2b4:	00 00       	nop
 2b6:	e5 cf       	rjmp	.-54     	; 0x282 <main+0x14>

000002b8 <__vector_1>:
        
    }
	
}

ISR(INT0_vect){
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
	DIO_vSetPinDirection('D',1,7);
 2da:	47 e0       	ldi	r20, 0x07	; 7
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	84 e4       	ldi	r24, 0x44	; 68
 2e0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vSetPinDirection>
	DIO_vWrite(LED2_PORT,1,LED2_PIN);
 2e4:	47 e0       	ldi	r20, 0x07	; 7
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	84 e4       	ldi	r24, 0x44	; 68
 2ea:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_vWrite>
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	89 e6       	ldi	r24, 0x69	; 105
 2f2:	98 e1       	ldi	r25, 0x18	; 24
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <__vector_1+0x3c>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <__vector_1+0x46>
 2fe:	00 00       	nop
	_delay_ms(1000);
	DIO_vWrite(LED2_PORT,0,LED2_PIN);
 300:	47 e0       	ldi	r20, 0x07	; 7
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	84 e4       	ldi	r24, 0x44	; 68
 306:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_vWrite>
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	89 e6       	ldi	r24, 0x69	; 105
 30e:	98 e1       	ldi	r25, 0x18	; 24
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <__vector_1+0x58>
 318:	00 c0       	rjmp	.+0      	; 0x31a <__vector_1+0x62>
 31a:	00 00       	nop
	_delay_ms(1000);
}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	bf 91       	pop	r27
 322:	af 91       	pop	r26
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	7f 91       	pop	r23
 32a:	6f 91       	pop	r22
 32c:	5f 91       	pop	r21
 32e:	4f 91       	pop	r20
 330:	3f 91       	pop	r19
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
